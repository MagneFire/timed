#include <iodata-qt5/validator>
#include "queue.type.h"
iodata::validator * events_data_validator(){
static bool init_done = false ;
static iodata::validator A ;
static iodata::/*validator::*/record_type record_type1 = { "action_t", vector<iodata::/*validator::*/node*>(3) } ;
static iodata::/*validator::*/record_type record_type2 = { "b_attr_t", vector<iodata::/*validator::*/node*>(1) } ;
static iodata::/*validator::*/record_type record_type3 = { "broken_down_t", vector<iodata::/*validator::*/node*>(5) } ;
static iodata::/*validator::*/record_type record_type4 = { "cred_modifier_t", vector<iodata::/*validator::*/node*>(2) } ;
static iodata::/*validator::*/record_type record_type5 = { "credentials_t", vector<iodata::/*validator::*/node*>(3) } ;
static iodata::/*validator::*/record_type record_type6 = { "event_queue_t", vector<iodata::/*validator::*/node*>(2) } ;
static iodata::/*validator::*/record_type record_type7 = { "event_t", vector<iodata::/*validator::*/node*>(15) } ;
static iodata::/*validator::*/record_type record_type8 = { "key_value_t", vector<iodata::/*validator::*/node*>(2) } ;
static iodata::/*validator::*/record_type record_type9 = { "recurrence_pattern_t", vector<iodata::/*validator::*/node*>(6) } ;
static const char *bitmask_list1[] = { NULL } ;
static iodata::/*validator::*/node_bitmask node1("flags", 0, 0, iodata::bitmask(0, bitmask_list1)) ;
static iodata::/*validator::*/node_record node2("attr", 1, 0, "key_value_t", &record_type8) ;
static iodata::/*validator::*/node_record node3("cred_modifier", 1, 0, "cred_modifier_t", &record_type4) ;
static iodata::/*validator::*/node_record node4("attr", 1, 0, "key_value_t", &record_type8) ;
static iodata::/*validator::*/node_integer node5("year", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node6("month", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node7("day", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node8("hour", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node9("minute", 0, 0, 0) ;
static iodata::/*validator::*/node_bytes node10("token", 0, 1, "") ;
static iodata::/*validator::*/node_integer node11("accrue", 0, 0, 0) ;
static iodata::/*validator::*/node_bytes node12("uid", 0, 0, "nobody") ;
static iodata::/*validator::*/node_bytes node13("gid", 0, 0, "nogroup") ;
static iodata::/*validator::*/node_bytes node14("tokens", 1, 0, "") ;
static iodata::/*validator::*/node_integer node15("next_cookie", 0, 0, 1) ;
static iodata::/*validator::*/node_record node16("events", 1, 0, "event_t", &record_type7) ;
static iodata::/*validator::*/node_integer node17("cookie", 0, 1, 0) ;
static iodata::/*validator::*/node_integer node18("ticker", 0, 0, 0) ;
static iodata::/*validator::*/node_record node19("t", 0, 0, "broken_down_t", &record_type3) ;
static iodata::/*validator::*/node_bytes node20("tz", 0, 0, "") ;
static iodata::/*validator::*/node_record node21("attr", 1, 0, "key_value_t", &record_type8) ;
static const char *bitmask_list2[] = { NULL } ;
static iodata::/*validator::*/node_bitmask node22("flags", 0, 0, iodata::bitmask(0, bitmask_list2)) ;
static iodata::/*validator::*/node_record node23("recrs", 1, 0, "recurrence_pattern_t", &record_type9) ;
static iodata::/*validator::*/node_record node24("actions", 1, 0, "action_t", &record_type1) ;
static iodata::/*validator::*/node_integer node25("snooze", 1, 0, 0) ;
static iodata::/*validator::*/node_record node26("b_attr", 1, 0, "b_attr_t", &record_type2) ;
static iodata::/*validator::*/node_integer node27("dialog_time", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node28("tsz_max", 0, 0, 0) ;
static iodata::/*validator::*/node_integer node29("tsz_counter", 0, 0, 0) ;
static iodata::/*validator::*/node_record node30("client_creds", 0, 0, "credentials_t", &record_type5) ;
static iodata::/*validator::*/node_record node31("cred_modifier", 1, 0, "cred_modifier_t", &record_type4) ;
static iodata::/*validator::*/node_bytes node32("key", 0, 0, "") ;
static iodata::/*validator::*/node_bytes node33("val", 0, 0, "") ;
static const char *bitmask_list3[] = { NULL } ;
static iodata::/*validator::*/node_bitmask node34("flags", 0, 0, iodata::bitmask(0, bitmask_list3)) ;
static const char *bitmask_list4[] = { "any_mins", NULL } ;
static iodata::/*validator::*/node_bitmask node35("mins", 0, 0, iodata::bitmask(0, bitmask_list4)) ;
static const char *bitmask_list5[] = { "any_hour", NULL } ;
static iodata::/*validator::*/node_bitmask node36("hour", 0, 0, iodata::bitmask(0, bitmask_list5)) ;
static const char *bitmask_list6[] = { "any_mday", NULL } ;
static iodata::/*validator::*/node_bitmask node37("mday", 0, 0, iodata::bitmask(0, bitmask_list6)) ;
static const char *bitmask_list7[] = { "any_wday", NULL } ;
static iodata::/*validator::*/node_bitmask node38("wday", 0, 0, iodata::bitmask(0, bitmask_list7)) ;
static const char *bitmask_list8[] = { "any_mons", NULL } ;
static iodata::/*validator::*/node_bitmask node39("mons", 0, 0, iodata::bitmask(0, bitmask_list8)) ;
if (not init_done) { init_done = true ;
A.set_static() ;
record_type1.nodes[0] = &node1 ;
record_type1.nodes[1] = &node2 ;
record_type1.nodes[2] = &node3 ;
A.types["action_t"] = &record_type1 ;
record_type2.nodes[0] = &node4 ;
A.types["b_attr_t"] = &record_type2 ;
record_type3.nodes[0] = &node5 ;
record_type3.nodes[1] = &node6 ;
record_type3.nodes[2] = &node7 ;
record_type3.nodes[3] = &node8 ;
record_type3.nodes[4] = &node9 ;
A.types["broken_down_t"] = &record_type3 ;
record_type4.nodes[0] = &node10 ;
record_type4.nodes[1] = &node11 ;
A.types["cred_modifier_t"] = &record_type4 ;
record_type5.nodes[0] = &node12 ;
record_type5.nodes[1] = &node13 ;
record_type5.nodes[2] = &node14 ;
A.types["credentials_t"] = &record_type5 ;
record_type6.nodes[0] = &node15 ;
record_type6.nodes[1] = &node16 ;
A.types["event_queue_t"] = &record_type6 ;
record_type7.nodes[0] = &node17 ;
record_type7.nodes[1] = &node18 ;
record_type7.nodes[2] = &node19 ;
record_type7.nodes[3] = &node20 ;
record_type7.nodes[4] = &node21 ;
record_type7.nodes[5] = &node22 ;
record_type7.nodes[6] = &node23 ;
record_type7.nodes[7] = &node24 ;
record_type7.nodes[8] = &node25 ;
record_type7.nodes[9] = &node26 ;
record_type7.nodes[10] = &node27 ;
record_type7.nodes[11] = &node28 ;
record_type7.nodes[12] = &node29 ;
record_type7.nodes[13] = &node30 ;
record_type7.nodes[14] = &node31 ;
A.types["event_t"] = &record_type7 ;
record_type8.nodes[0] = &node32 ;
record_type8.nodes[1] = &node33 ;
A.types["key_value_t"] = &record_type8 ;
record_type9.nodes[0] = &node34 ;
record_type9.nodes[1] = &node35 ;
record_type9.nodes[2] = &node36 ;
record_type9.nodes[3] = &node37 ;
record_type9.nodes[4] = &node38 ;
record_type9.nodes[5] = &node39 ;
A.types["recurrence_pattern_t"] = &record_type9 ;
}
return &A ;
}

